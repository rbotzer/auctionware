#!/usr/bin/env ruby
#
# Initial Author: Ronen Botzer 3/14/13
# Latest Modification: Ronen Botzer, 3/10/14
#
require 'rubygems'
require 'optparse'
require 'prawn'
require 'yaml'

options = {
    :path => nil
}

OptionParser.new do |opts|
    # help header
    opts.banner = " Usage: bid_sheets [options]\n"
    opts.separator " Generates bid sheets from the tsv source as a single PDF\n"

    opts.on("-p", "--path STRING", "Location of the tsv source file") do |n|
        options[:path] = n
    end
    # parsing 'help' option if present
    opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
    end
end.parse!

def get_config(config_path = nil)
  if File.readable?(config_path) && File.size(config_path) > 0
    begin
      YAML::load(IO.read(config_path))
    rescue
      # we failed to parse :(
      raise "Error: failed to parse configuration file"
    end
  else
    # we did not find existent and non zero config file
    raise "Error: configuration file does not exist or is empty"
  end
end

class Lot
  attr_accessor :id, :name, :description, :donor, :value, :minbid, :bidinc, :buynow, :is_empty

  def initialize(id, name, desc, donor, value)
    @id = id.to_i
    @name = name
    @description = desc
    @donor = donor
    if value.to_i > 0
      @value = value
      @minbid = (value.to_f * 0.40).floor.to_i
      @bidinc = (value.to_f * 0.10).floor.to_i
      @buynow = (value.to_f * 1.25).floor.to_i
      @value = "$#{value}"
    else
      @value = 'Priceless'
      @minbid = 40
      @bidinc = '     '
      @buynow = 0
    end
    @is_empty = false
  end

  def clear
    @id = ''
    @name = ''
    @description = ''
    @donor = ''
    @value = '     '
    @minbid = '     '
    @bidinc = '     '
    @buynow = '     '
    @is_empty = true
  end

  def empty?
    @is_empty
  end

  def bidinc_s()
    if @value != 'Priceless'
      "Increase bids in $#{@bidinc.ceil.to_s} increments or more"
    else
      "      "
    end
  end
end

def to_currency(number)
  if number.class == String
    ''
  elsif number > 0
    "$#{number.to_s}"
  else
    "Priceless"
  end
end

def sanitize(str)
  if str.nil?
      ''
  elsif str.length == 0
      ''
  elsif (str[0].ord != 34)
    str
  else
    #str = str[1...-1]
    str.gsub!(/\\"/, '"')
    str.gsub!(/"$/, '')
    str.gsub!(/^"/, '')
  end
end

unless (options[:path])
    options[:path] = File.join(File.dirname(__FILE__), 'items_view.tsv')
end
data = IO.read(options[:path]).split("\n")
puts data.count

lots = []
l = 1
data.each do |line|
  puts "parsing line number #{l}"
  l += 1
  d = line.strip.split("\t")
  name = sanitize(d[1])
  desc = sanitize(d[2])
  donor = sanitize(d[3])
  minbid = d[5]
  bidinc = d[6]
  buynow = d[7]
  lot = Lot.new(d[0],name,desc,donor,d[4])
  lot.minbid = minbid.to_i if minbid
  lot.bidinc = bidinc.to_i if bidinc
  lot.buynow = buynow.to_i if buynow
  lots << lot
end

i = 0
begin
  nbsp = Prawn::Text::NBSP
  Prawn::Document.generate("auction-cards.pdf", :margin => 25) do |pdf|
    # Registering a single TTF font
    pdf.font_families.update(
     "Calibri" => {
       :normal => "#{Prawn::DATADIR}/fonts/Calibri.ttf",
       :italic => "#{Prawn::DATADIR}/fonts/CalibriItalic.ttf",
       :bold   => "#{Prawn::DATADIR}/fonts/CalibriBold.ttf",
     }
    )
    pdf.font("Calibri") do
      while i < (lots.size)
      lot = lots[i]
      puts "at "+i.to_s
      pdf.bounding_box([0, 700], :width => 280, :height => 600) do
        pdf.text "Silent Auction Bidding Card#{nbsp}##{lot.id}", :size => 14, :style => :bold
        pdf.move_down(4)
        pdf.text "Package Name:", :size => 12, :style => :bold
        pdf.move_down(2)
        pdf.text lot.name, :size => 10
        pdf.move_down(10) if lot.name == ''
        pdf.move_down(2)
        pdf.text "Donor:", :size => 12, :style => :bold
        pdf.move_down(2)
        pdf.text lot.donor, :size => 10
        pdf.move_down(12) if lot.donor == ''
        pdf.move_down(4)
        pdf.text "Value: #{nbsp}#{lot.value.to_s}  Starting Bid: #{nbsp}$#{lot.minbid.to_s}", :size => 12, :style => :bold
        pdf.move_down(2)
        if lot.buynow > 0
            pdf.text "Bids:#{nbsp * 16}Buy It Now: #{nbsp}$#{lot.buynow.to_s}", :size => 12, :style => :bold
            #pdf.text "Bids:", :size => 12, :style => :bold
            pdf.text "#{lot.bidinc_s}", :size => 8, :style => :bold
            pdf.move_down(2)
            pdf.table([["Bidder#{nbsp}#",  "Buy It Now"]], :cell_style => { :style=>:bold, :borders => [:bottom], :border_width => 1, :width => 120 }) 
            pdf.move_down(2)
        else
            pdf.text "Bids:", :size => 12, :style => :bold
            pdf.text "#{lot.bidinc_s}", :size => 8, :style => :bold
            pdf.move_down(2)
            pdf.table([["Bidder#{nbsp}#",  "Bid:#{nbsp}$"]], :cell_style => { :style=>:bold, :borders => [:bottom], :border_width => 1, :width => 120 }) 
            pdf.move_down(2)
        end
        rows = 17
        rows = 16 if lot.donor.size > 130 || lot.name.size > 40
        pdf.table([["Bidder#{nbsp}#",  "Bid:#{nbsp}$"]] * rows, :cell_style => { :borders => [:bottom], :border_width => 1, :width => 120 }) 
      end
      i += 1
      lot = lots[i]
      puts "at "+i.to_s
      pdf.bounding_box([300, 700], :width => 280, :height => 600) do
        pdf.text "Silent Auction Bidding Card#{nbsp}##{lot.id}", :size => 14, :style => :bold
        pdf.move_down(4)
        pdf.text "Package Name:", :size => 12, :style => :bold
        pdf.move_down(2)
        pdf.text lot.name, :size => 10
        pdf.move_down(10) if lot.name == ''
        pdf.move_down(2)
        pdf.text "Donor:", :size => 12, :style => :bold
        pdf.move_down(2)
        pdf.text lot.donor, :size => 10
        pdf.move_down(12) if lot.donor == ''
        pdf.move_down(4)
        pdf.text "Value: #{nbsp}#{lot.value.to_s}  Starting Bid: #{nbsp}$#{lot.minbid.to_s}", :size => 12, :style => :bold
        pdf.move_down(2)
        if lot.buynow > 0
            pdf.text "Bids:#{nbsp * 16}Buy It Now: #{nbsp}$#{lot.buynow.to_s}", :size => 12, :style => :bold
            #pdf.text "Bids:", :size => 12, :style => :bold
            pdf.text "#{lot.bidinc_s}", :size => 8, :style => :bold
            pdf.move_down(2)
            pdf.table([["Bidder#{nbsp}#",  "Buy It Now"]], :cell_style => { :style=>:bold, :borders => [:bottom], :border_width => 1, :width => 120 }) 
            pdf.move_down(2)
        else
            pdf.text "Bids:", :size => 12, :style => :bold
            pdf.text lot.bidinc_s, :size => 8, :style => :bold
            pdf.move_down(2)
            pdf.table([["Bidder#{nbsp}#",  "Bid:#{nbsp}$"]], :cell_style => { :style=>:bold, :borders => [:bottom], :border_width => 1, :width => 120 }) 
            pdf.move_down(2)
        end
        rows = 17
        rows = 16 if lot.donor.size > 130 || lot.name.size > 40
        pdf.table([["Bidder#{nbsp}#",  "Bid:#{nbsp}$"]] * rows, :cell_style => { :borders => [:bottom], :border_width => 1, :width => 120 }) 
      end
      i += 1
      pdf.start_new_page if i < lots.size
      end
    end
    pdf.start_new_page if i < lots.size
  end
end
puts "Done"
exit(0)
